# Load upstream vagrant file with common settings
# upstream_vagrantfile = File.expand_path("../Vagrantfile", __FILE__)
# load upstream_vagrantfile if File.exist?(upstream_vagrantfile)

# # Load upstream windows vagrant file with common settings
# windows_vagrantfile = File.expand_path("../Vagrantfile_Windows", __FILE__)
# load windows_vagrantfile if File.exist?(windows_vagrantfile)

Vagrant.configure("2") do |config|
  config.vm.box = "win7x64pro"
  config.vm.box_url = "https://googledrive.com/host/0B6J6sk4wHy07NE00OEQyYnoySDg/"
  #VMWare version
  #config.vm.box_url = "https://googledrive.com/host/0B6J6sk4wHy07WW1LamJzakt2MUE/"

  config.vm.provider :virtualbox do |v|
    # Don't boot with headless mode
    v.gui = true
  end

  config.vm.provider :vmware_fusion do |v|
    # Don't boot with headless mode
    v.gui = true
  end

  # Configure base box parameters
  config.vm.guest = :windows

  # Max time to wait for the guest to shutdown
  config.windows.halt_timeout = 20

  # Admin user name and password
  config.winrm.username = "vagrant"
  config.winrm.password = "vagrant"

  # Port forward WinRM
  config.vm.network :forwarded_port, guest: 5985, host: 5985

  # Create a private network, which allows host-only access to the machine
  # using a specific IP.
  config.vm.network :private_network, ip: "192.168.0.3"

  config.vm.synced_folder "~", "/home"
  config.vm.synced_folder "puppet/box_modules", "/ProgramData/PuppetLabs/puppet/etc/modules"

  # This shell provisioner installs chocolatey, ruby, and puppet. Also runs librarian-puppet.
  config.vm.provision :shell, :path => "shell/main.cmd"

  # Enable provisioning with Puppet stand alone.  Puppet manifests
  # are contained in a directory path relative to this Vagrantfile.
  config.vm.provision :puppet, :options => ["--debug --trace --verbose"] do |puppet|
    puppet.manifests_path = "puppet/manifests"
    puppet.manifest_file  = "site.pp"
    puppet.module_path = "puppet/modules"
    puppet.facter = {
      "domain" => "local",
      "kernel" => "windows",
      "operatingsystem" => "windows",
      "osfamily" => "windows",
    }
  end
end
